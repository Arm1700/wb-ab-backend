version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: wb-ab-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: wb_ab_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - wb-ab-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (NestJS)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wb-ab-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=wb_ab_db
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/wb_ab_db?schema=public
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - wb-ab-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "
        echo '⏳ Waiting for PostgreSQL...' &&
        sleep 8 &&
        npx prisma generate &&
        npx prisma migrate deploy &&
        echo '🚀 Starting backend...' &&
        node dist/main
      "

  # Frontend (Next.js)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: wb-ab-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:3001/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - wb-ab-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "
      until pg_isready -h postgres -p 5432 -U postgres; do
        echo 'Waiting for Postgres...';
        sleep 2;
      done
      &&
      npx prisma generate
      &&
      npx prisma migrate deploy
      &&
      node dist/main
      "


  # NGINX reverse proxy
  nginx:
    image: nginx:alpine
    container_name: wb-ab-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - wb-ab-network

networks:
  wb-ab-network:
    driver: bridge

volumes:
  postgres_data:
