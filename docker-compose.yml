version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: wb-ab-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: wb_ab_testing
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - wb-ab-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (NestJS)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wb-ab-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=wb_ab_testing
      - PORT=3001
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - wb-ab-network
    volumes:
      - .:/app
      - /app/node_modules

  # Frontend (Next.js)
  frontend:
    build:
      context: ../wb-ab-frontend
      dockerfile: Dockerfile
    container_name: wb-ab-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001/api
    depends_on:
      - backend
    networks:
      - wb-ab-network
    volumes:
      - ../wb-ab-frontend:/app
      - /app/node_modules
      - /app/.next

networks:
  wb-ab-network:
    driver: bridge

volumes:
  postgres_data:
