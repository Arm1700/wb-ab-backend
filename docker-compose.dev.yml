version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: wb-ab-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: wb_ab_testing
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - wb-ab-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: wb-ab-backend-dev
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: wb_ab_testing
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/wb_ab_testing?schema=public
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - wb-ab-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: ["sh", "-c", "npx prisma generate && npm run start:dev"]

  frontend:
    build:
      context: ../wb-ab-frontend
      dockerfile: Dockerfile.dev
    container_name: wb-ab-frontend-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
    depends_on:
      - backend
    networks:
      - wb-ab-network
    volumes:
      - ../wb-ab-frontend:/usr/src/app
      - /usr/src/app/node_modules
    command: ["npm", "run", "dev"]

networks:
  wb-ab-network:
    driver: bridge

volumes:
  postgres_data_dev:
